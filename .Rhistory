}
)
# param()[["Pairs]] includes the all possible pairs we should iterate
# iteration by rows
# the korrel function is applied to rows
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
rownames(solution) <- (param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
# the corralations are ordered to the last Date of the window
#it is not obligatory
head(solution) # not date format # ERROR
solution <- xts::as.xts(ts(solution))
list.name=paste0("WS",select.param()[1],"&","Lag",select.param()[2])
solution <-list(solution)
names(solution) <- list.name
Correl<-list(Correl, solution)
}}
for (i in 1:length(param()[["WindowSize"]])){
for (j in 1:length(param()[["CorrelLag"]])){
select.param <- function(i=i,j=j){
# select.param <- function(){
return(c(
# windowsize=param()[["WindowSize"]][1],
# correllag=param()[["CorrelLag"]][1]
windowsize=param()[["WindowSize"]][i],
correllag=param()[["CorrelLag"]][j]
)
)
}
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
# param()[["Pairs]] includes the all possible pairs we should iterate
# iteration by rows
# the korrel function is applied to rows
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
rownames(solution) <- (param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
# the corralations are ordered to the last Date of the window
#it is not obligatory
head(solution) # not date format # ERROR
solution <- xts::as.xts(ts(solution))
list.name=paste0("WS",select.param()[1],"&","Lag",select.param()[2])
solution <-list(solution)
names(solution) <- list.name
Correl<-list(Correl, solution)
}}
dN
#korrel <-function(first="CL1",second="CL2",windowsize=param()[["WindowSize"]][1], correllag=param()[["CorrelLag"]][1])
korrel <-function(first="CL1",second="CL2")
{
# calc correlation
# windowsize & correlag derive from another function
# it makes easier to create labels
windowsize <- select.param()["windowsize"]
correllag <- select.param()["correllag"]
N <- nrow(read()) # length of time series
dN <- N - windowsize - correllag # shorter ts length
assertthat::validate_that(!schoolmath::is.negative(dN)==T)
shift <- matrix(rep(0:(dN-1),each=windowsize), byrow = TRUE, ncol=windowsize)
# shift to select proper windows for correlation calculation
shift_lag <- shift + correllag
# shift should be lagged by correllag
w <- matrix(rep(c(1:windowsize), dN), byrow = TRUE, ncol = windowsize, nrow=dN)
w_0lag <- w + shift
# first matrix select indexes for the first variable
w_lag <- w + shift_lag
# second matrix select indexes for the second variable
# a <- matrix(param()[[param()[["Pairs"]][[1,1]]]][w_0lag], byrow=F, ncol=windowsize)#[1,]
# b <- matrix(param()[[param()[["Pairs"]][[1,2]]]][w_lag], byrow=F, ncol=windowsize)#[1,]
number_of_correlations <- dim(param()[["Pairs"]])[1]
# select time series
aa <- matrix(param()[[first]][w_0lag], byrow=F, ncol=windowsize)#[1,]
bb <- matrix(param()[[second]][w_lag], byrow=F, ncol=windowsize)#[1,]
# param[["Correl"]][paste0(first," - ", second)] <- lineup::corbetw2mat(t(aa),t(bb))
corr_vector <- lineup::corbetw2mat(t(aa),t(bb))
# calculate correlation between matrix columns by pairs
# transpose is needed, thus the comparable data are in matrix rows
# param()[["Date"]][1:dN]
# dt <- c(param()[["Date"]][1:dN])
#mat$Date <- c(param()[["Date"]][1:dN])
#mat <- ts(corr_vector)
date <- dplyr::slice(param()[["Date"]],((windowsize+1):dim(param()[["Date"]])[1]))
mat <- xts::as.xts(ts(corr_vector))
# mat <- xts::xts(x=corr_vector,order.by = date, order.by=as.Date(1:2507))# , order.by = as.Date(c(param()[["Date"]][1:dN])))
# mat <- xts::as.xts(x=corr_vector)# , order.by = as.Date(c(param()[["Date"]][1:dN])))
# convert to xts (time-series) format
names(mat)<- paste0(first,"-", second) # naming the correlation vector
# head(xts.format)
# head(xts::as.xts(x=ts(corr_vector)))
#mat
#mat <- matrix(corr_vector, ncol=dN, nrow = 1, dimnames = list(paste0(first,"-", second),dt))
# param[[paste0(first,"-", second)]] <- matrix(corr_vector,nrow=dN, ncol = 1, dimnames = list(dt,paste0(first,"-", second)))
#
# param$alma <- corr_vector
#
# param[["alma"]] <- mat
#
# param[["Correl"]] <- as.vector(corr_vector)
# c(paste0(first," - ", second), as.Date(param()[["Date"]][1:dN], "%y-%m-%d"))
# lineup::corbetw2mat(t(a),t(b))
# corbetw2mat computes the correlation between two matrices cols
#index <- 1:dN
return(mat)
}
Correl
solution
list(Correl, solution)
Correl<-list(Correl, solution)
Correl
select.param()
select.param()[["correllag"]]
select.param(())
select.param()
i=1
j=2
windowsize=param()[["WindowSize"]][i]
correllag=param()[["CorrelLag"]][j]
for (i in 1:length(param()[["WindowSize"]])){
for (j in 1:length(param()[["CorrelLag"]])){
select.param <- function(i=i,j=j){
# select.param <- function(){
return(c(
# windowsize=param()[["WindowSize"]][1],
# correllag=param()[["CorrelLag"]][1]
windowsize=param()[["WindowSize"]][i],
correllag=param()[["CorrelLag"]][j]
)
)
}
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
# param()[["Pairs]] includes the all possible pairs we should iterate
# iteration by rows
# the korrel function is applied to rows
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
rownames(solution) <- (param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
# the corralations are ordered to the last Date of the window
#it is not obligatory
head(solution) # not date format # ERROR
solution <- xts::as.xts(ts(solution))
list.name=paste0("WS",select.param()[1],"&","Lag",select.param()[2])
solution <-list(solution)
names(solution) <- list.name
Correl<-list(Correl, solution)
}}
for (i in 1:length(param()[["WindowSize"]])){
for (j in 1:length(param()[["CorrelLag"]])){
select.param <- function(i=i,j=j){
# select.param <- function(){
return(c(
# windowsize=param()[["WindowSize"]][1],
# correllag=param()[["CorrelLag"]][1]
windowsize=param()[["WindowSize"]][i],
correllag=param()[["CorrelLag"]][j]
)
)
}
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
# param()[["Pairs]] includes the all possible pairs we should iterate
# iteration by rows
# the korrel function is applied to rows
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
rownames(solution) <- (param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
# the corralations are ordered to the last Date of the window
#it is not obligatory
head(solution) # not date format # ERROR
solution <- xts::as.xts(ts(solution))
list.name=paste0("WS",select.param()[1],"&","Lag",select.param()[2])
solution <-list(solution)
names(solution) <- list.name
Correl<-list(Correl, solution)
}}
for (i in 1:length(param()[["WindowSize"]])){
for (j in 1:length(param()[["CorrelLag"]])){
select.param <- function(i=i,j=j){
# select.param <- function(){
return(c(
# windowsize=param()[["WindowSize"]][1],
# correllag=param()[["CorrelLag"]][1]
windowsize=param()[["WindowSize"]][i],
correllag=param()[["CorrelLag"]][j]
)
)
}
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
# param()[["Pairs]] includes the all possible pairs we should iterate
# iteration by rows
# the korrel function is applied to rows
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
rownames(solution) <- (param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
# the corralations are ordered to the last Date of the window
#it is not obligatory
head(solution) # not date format # ERROR
solution <- xts::as.xts(ts(solution))
list.name=paste0("WS",select.param()[1],"&","Lag",select.param()[2])
solution <-list(solution)
names(solution) <- list.name
Correl<-list(Correl, solution)
}}
setwd("C:/Users/Reizinger KristÃ³f/Desktop/HF")
source(c("korrel.R","param.R","read.R"))
source("korrel.R")
source("read.R")
read_range <- paste0("A1:",last_col_name,last_row_number)
read_range
read()
Correl <- list()
# for (i in 1:length(param()[["WindowSize"]])){
#  for (j in 1:length(param()[["CorrelLag"]])){
#  select.param <- function(i=i,j=j){
select.param <- function(){
return(c(
windowsize=param()[["WindowSize"]][1],
correllag=param()[["CorrelLag"]][1]
# windowsize=param()[["WindowSize"]][i],
# correllag=param()[["CorrelLag"]][j]
)
)
}
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
x<- c("a","b","c", "d")
m <- matrix(NA,ncol=2,nrow = 6)
m
x<- c("a","b","c", "d")
m <- matrix(NA,ncol=2,nrow = 6)
n <- length(x)
for(i in 1:(n-1)){
for(j in (i+1):n){
m[(n-i+1)*(i-1)+(j-1),1] <- x[i]
m[(n-i+1)*(i-1)+(j-1),2] <- x[j]
}
}
x[i]
m
x<- c("a","b","c", "d")
m <- matrix(NA,ncol=2,nrow = 6)
n <- length(x)
for(i in 1:(n-1)){
for(j in (i+1):n){
m[(n-i+1)*(i-1)+(j-i),1] <- x[i]
m[(n-i+1)*(i-1)+(j-i),2] <- x[j]
}
}
m
x<- c("a","b","c", "d")
m <- matrix(NA,ncol=2,nrow = 6)
n <- length(x)
k <- 1
for(i in 1:(n-1)){
for(j in (i+1):n){
m[k,1] <- x[i]
m[k,2] <- x[j]
k <- k + 1
}
}
m
source("param.R")
param()
param()
source("param.R")
param()
source("param.R")
param()
source("param.R")
param()
select.param()
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
solution
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
rownames(solution) <- (param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
head(solution) # not date format # ERROR
(param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
param()[["Date"]]
class(param()[["Date"]])
dim(param()[["Date"]])
dim(param()[["Date"]])[[1]]
(param()[["Date"]])[[1]]
(param()[["Date"]])[[2]]
sdate <- (param()[["Date"]])
sdate
class(sdate)
as.vector(sdate)
as.matrix(sdate)
sdate <-as.matrix(sdate)
rownames(sdate)
rownames(solution) <- sdate
dim(sdate)
as.vector(as.matrix(sdate))
sdate <-as.vector(as.matrix(sdate))
rownames(solution) <- sdate
dim(solution)
class(sdate)
as.Date(as.vector(as.matrix(sdate)))
sdate <-as.Date(as.vector(as.matrix(sdate)))
class(sdate)
rownames(solution) <- sdate
dim(sdate)
length(sdate)
rownames(solution)
rownames(solution) <- sdate
dim(solution)
as.Date(as.vector(as.matrix(sdate)))[-((tslength+1):length(param()[["Date"]]))]
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
-((tslength+1):length(param()[["Date"]]))
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
tslength
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
tslength
length(sdate)
length(sdate)-dim(solution)[1]
select.param()[["windowsize"]]
(select.param()[["windowsize"]]+select.param()[["correllag"]] + 1):length(sdate)
length((select.param()[["windowsize"]]+select.param()[["correllag"]] + 1):length(sdate))
sdate <- (param()[["Date"]])
sdate <-as.Date(as.vector(as.matrix(sdate)))[(select.param()[["windowsize"]]+select.param()[["correllag"]] + 1):length(sdate)]
rownames(solution) <- sdate
length(sdate)
(select.param()[["windowsize"]]+select.param()[["correllag"]] + 1):length(sdate)
sdate <- (param()[["Date"]])
length(sdate)
sdate
dim(sdate)[1]
sdate <-as.Date(as.vector(as.matrix(sdate)))[(select.param()[["windowsize"]]+select.param()[["correllag"]] + 1):dim(sdate)[1]]
rownames(solution) <- sdate
head(solution) # not date format # ERROR
class(sdate)
class(solution)
xts::as.xts(ts(solution))
head(solution) # not date format # ERROR
xts::last(sdate)
solution <- xts::as.xts(ts(solution, start = sdate[1], end = xts::last(sdate)))
head(solution) # not date format # ERROR
list.name=paste0("WS",select.param()[1],"&","Lag",select.param()[2])
list(solution)
names(solution) <- list.name
list.name
names(solution)
param()[["Pairs"]]
param()[["Pairs"]]["CL1","CL2"]
all_correlation <- function(){
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
# param()[["Pairs]] includes the all possible pairs we should iterate
# iteration by rows
# the korrel function is applied to rows
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
rownames(solution) <- (param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
# the corralations are ordered to the last Date of the window
#it is not obligatory
sdate <- (param()[["Date"]])
sdate <-as.Date(as.vector(as.matrix(sdate)))[(select.param()[["windowsize"]]+select.param()[["correllag"]] + 1):dim(sdate)[1]]
# the rolling correlation coefficients are assigned to the last day of the window
# the choose of date determines the vector in sdate
rownames(solution) <- sdate
solution <- xts::as.xts(ts(solution, start = sdate[1], end = xts::last(sdate)))
#list.name=paste0("WS",select.param()[1],"&","Lag",select.param()[2])
return(solution)
}
all_correlation()
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
head(solution)
sdate <- (param()[["Date"]])
sdate <-as.Date(as.vector(as.matrix(sdate)))[(select.param()[["windowsize"]]+select.param()[["correllag"]] + 1):dim(sdate)[1]]
rownames(solution) <- sdate
solution <- xts::as.xts(ts(solution, start = sdate[1], end = xts::last(sdate)))
all_correlation <- function(){
solution <-apply(param()[["Pairs"]],1,
FUN=function(x){
solution <- c(korrel(first = x[1], second = x[2]))
return(solution)
}
)
# param()[["Pairs]] includes the all possible pairs we should iterate
# iteration by rows
# the korrel function is applied to rows
colnames(solution) <- paste0(param()[["Pairs"]][,1],"-",param()[["Pairs"]][,2]) # naming correlation matrix
#tslength <-length(param()[["Date"]]) - select.param()[["windowsize"]] -  select.param()[["correllag"]] # including dates# ERROR
#rownames(solution) <- (param()[["Date"]][-((tslength+1):length(param()[["Date"]]))])
# the corralations are ordered to the last Date of the window
#it is not obligatory
sdate <- (param()[["Date"]])
sdate <-as.Date(as.vector(as.matrix(sdate)))[(select.param()[["windowsize"]]+select.param()[["correllag"]] + 1):dim(sdate)[1]]
# the rolling correlation coefficients are assigned to the last day of the window
# the choose of date determines the vector in sdate
rownames(solution) <- sdate
solution <- xts::as.xts(ts(solution, start = sdate[1], end = xts::last(sdate)))
#list.name=paste0("WS",select.param()[1],"&","Lag",select.param()[2])
return(solution)
}
solution
input <- all_correlation()[,paste0("CL1","-","CL2") ]
input
class( (param()[["Date"]]))
ws <- c(50,100,200, 500)
cl <- c(0,1)
ws <- 200 #c(50,100,200, 500)
cl <- 0 #c(0,1)
source("korrel.R")
source("param.R")
source("read.R")
source("all_correlation.R")
# Help: input for plot
input <- all_correlation()[,paste0("CL1","-","CL2") ]
# Help: input for plot
input <- all_correlation()[,paste0("CL1","-","CL2") ]
param()
source("korrel.R")
source("param.R")
source("read.R")
source("all_correlation.R")
param()
source("korrel.R")
source("param.R")
source("read.R")
source("all_correlation.R")
param()
# Help: input for plot
# add the labels
name1 <- "CL1"
name2 <- "CL2"
input <- all_correlation()[,paste0(name1,"-",name2) ]
i1 <-1
i2 <-1
#A.) an auxilary function
select.param <- function(index1=i1, index2=i2){
return(c(
windowsize=param()[["WindowSize"]][index1],
correllag=param()[["CorrelLag"]][index2]
)
)
}
korrel()
#3.)
#a.) param() stores the data
# You should add your input parameters (windowsize and correlation lag) opening opening() function
#b.) korrel() calculate only 1 correlation
#c.) all_correlation() output is an xts format table (rows=Date, cols=correlation pairs)
all_correlation()
head(all_correlation())
i2 <-2
#A.) an auxilary function
select.param <- function(index1=i1, index2=i2){
return(c(
windowsize=param()[["WindowSize"]][index1],
correllag=param()[["CorrelLag"]][index2]
)
)
}
korrel()
head(all_correlation())
source("select.R")
# data
#1.)Set wd
dataset <- c("C:/Users/Reizinger KristÃ³f/Desktop/HF/WTI2.xlsx")
#2.) Inputfor reading data
number_of_products <- 3 # 24 # number of analysed products
assertthat::validate_that(is.numeric(number_of_products)==T)
last_col_name <- Excel_colnames_find()[number_of_products + 1] # first col is Date
last_row_number <- 2558 # number of rows
read_range <- paste0("A1:",last_col_name,last_row_number) # converts inputs for Excel format
i1 <-1
i2 <-2
head(all_correlation())
param()[["Windowsize"]]
param()[["WindowSize"]]
param()[["CorrelLag"]]
#Correlation Lag
#view the possibilities
param()[["CorrelLag"]]
